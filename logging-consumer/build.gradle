plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id("com.palantir.docker") version "0.36.0"
}

group = 'me.wane.loggingconsumer'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

//    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'org.jetbrains:annotations:24.0.0'
    testImplementation 'com.tngtech.archunit:archunit:1.2.1'

    implementation project(path: ":common")

    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    compileOnly 'org.projectlombok:lombok'
//    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'org.springframework.kafka:spring-kafka'

//    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

docker {
    println(tasks.bootJar.outputs.files)

    //이미지 이름
    name rootProject.name+'-'+project.name + ":" + version

    //어떤 Dockerfile을 사용할지
    dockerfile file("../Dockerfile")

    //어떤 파일들을 Dockerfile에 복사할 것인가
    files tasks.bootJar.outputs.files

    //Dockerfile에 전달할 인자
    buildArgs(['JAR_FILE' : tasks.bootJar.outputs.files.singleFile.name])
}